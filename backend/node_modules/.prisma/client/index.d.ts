
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  email: string
  password: string
  created_at: Date | null
  updated_at: Date | null
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: string
  name: string
  type: string
  created_at: Date | null
  updated_at: Date | null
  created_by_id: string | null
  updated_by_id: string | null
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: string
  name: string
  expense: boolean
  includeGoal: boolean
  created_at: Date | null
  updated_at: Date | null
  created_by: string | null
  updated_by: string | null
}

/**
 * Model Period
 * 
 */
export type Period = {
  id: string
  month: number
  year: number
  created_at: Date | null
  updated_at: Date | null
  created_by: string | null
  updated_by: string | null
}

/**
 * Model Goal
 * 
 */
export type Goal = {
  id: string
  amount: number
  created_at: Date | null
  updated_at: Date | null
  created_by: string | null
  updated_by: string | null
}

/**
 * Model GoalPeriod
 * 
 */
export type GoalPeriod = {
  id: string
  amount: number
  created_at: Date | null
  updated_at: Date | null
  created_by: string | null
  updated_by: string | null
  period_id: string
}

/**
 * Model Expense
 * 
 */
export type Expense = {
  id: string
  date: Date
  description: string | null
  value: number
  created_at: Date | null
  updated_at: Date | null
  created_by: string | null
  updated_by: string | null
  category_id: string
  period_id: string
}

/**
 * Model Earn
 * 
 */
export type Earn = {
  id: string
  date: Date
  description: string | null
  value: number
  created_at: Date | null
  updated_at: Date | null
  created_by: string | null
  updated_by: string | null
  category_id: string
  period_id: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.period`: Exposes CRUD operations for the **Period** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Periods
    * const periods = await prisma.period.findMany()
    * ```
    */
  get period(): Prisma.PeriodDelegate<GlobalReject>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<GlobalReject>;

  /**
   * `prisma.goalPeriod`: Exposes CRUD operations for the **GoalPeriod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GoalPeriods
    * const goalPeriods = await prisma.goalPeriod.findMany()
    * ```
    */
  get goalPeriod(): Prisma.GoalPeriodDelegate<GlobalReject>;

  /**
   * `prisma.expense`: Exposes CRUD operations for the **Expense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expense.findMany()
    * ```
    */
  get expense(): Prisma.ExpenseDelegate<GlobalReject>;

  /**
   * `prisma.earn`: Exposes CRUD operations for the **Earn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Earns
    * const earns = await prisma.earn.findMany()
    * ```
    */
  get earn(): Prisma.EarnDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Category: 'Category',
    Period: 'Period',
    Goal: 'Goal',
    GoalPeriod: 'GoalPeriod',
    Expense: 'Expense',
    Earn: 'Earn'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    expenses: number
    earnings: number
  }

  export type CategoryCountOutputTypeSelect = {
    expenses?: boolean
    earnings?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type PeriodCountOutputType
   */


  export type PeriodCountOutputType = {
    expenses: number
    earnings: number
    GoalPeriods: number
  }

  export type PeriodCountOutputTypeSelect = {
    expenses?: boolean
    earnings?: boolean
    GoalPeriods?: boolean
  }

  export type PeriodCountOutputTypeGetPayload<S extends boolean | null | undefined | PeriodCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PeriodCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PeriodCountOutputTypeArgs)
    ? PeriodCountOutputType 
    : S extends { select: any } & (PeriodCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PeriodCountOutputType ? PeriodCountOutputType[P] : never
  } 
      : PeriodCountOutputType




  // Custom InputTypes

  /**
   * PeriodCountOutputType without action
   */
  export type PeriodCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PeriodCountOutputType
     * 
    **/
    select?: PeriodCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    created_at: Date | null
    updated_at: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type UserGetPayload<S extends boolean | null | undefined | UserArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by_id: string | null
    updated_by_id: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by_id: string | null
    updated_by_id: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    name: number
    type: number
    created_at: number
    updated_at: number
    created_by_id: number
    updated_by_id: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    name: string
    type: string
    created_at: Date | null
    updated_at: Date | null
    created_by_id: string | null
    updated_by_id: string | null
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by_id?: boolean
    updated_by_id?: boolean
  }


  export type AccountGetPayload<S extends boolean | null | undefined | AccountArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Account :
    S extends undefined ? never :
    S extends { include: any } & (AccountArgs | AccountFindManyArgs)
    ? Account 
    : S extends { select: any } & (AccountArgs | AccountFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Account ? Account[P] : never
  } 
      : Account


  type AccountCountArgs = Merge<
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): PrismaPromise<Array<AccountGetPayload<T>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find one Account that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }

  /**
   * Account: findUnique
   */
  export interface AccountFindUniqueArgs extends AccountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account: findFirst
   */
  export interface AccountFindFirstArgs extends AccountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Filter, which Accounts to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * The data needed to create a Account.
     * 
    **/
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     * 
    **/
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * The data needed to update a Account.
     * 
    **/
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     * 
    **/
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * The filter to search for the Account to update in case it exists.
     * 
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     * 
    **/
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Filter which Account to delete.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account: findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs = AccountFindUniqueArgsBase
      

  /**
   * Account: findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs = AccountFindFirstArgsBase
      

  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    expense: boolean | null
    includeGoal: boolean | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    expense: boolean | null
    includeGoal: boolean | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    expense: number
    includeGoal: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    expense?: true
    includeGoal?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    expense?: true
    includeGoal?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    expense?: true
    includeGoal?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    name: string
    expense: boolean
    includeGoal: boolean
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    expense?: boolean
    includeGoal?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    expenses?: boolean | ExpenseFindManyArgs
    earnings?: boolean | EarnFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    expenses?: boolean | ExpenseFindManyArgs
    earnings?: boolean | EarnFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  } 

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'expenses' ? Array < ExpenseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'earnings' ? Array < EarnGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'expenses' ? Array < ExpenseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'earnings' ? Array < EarnGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    expenses<T extends ExpenseFindManyArgs= {}>(args?: Subset<T, ExpenseFindManyArgs>): PrismaPromise<Array<ExpenseGetPayload<T>>| Null>;

    earnings<T extends EarnFindManyArgs= {}>(args?: Subset<T, EarnFindManyArgs>): PrismaPromise<Array<EarnGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category: findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category: findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category: findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = CategoryFindUniqueArgsBase
      

  /**
   * Category: findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = CategoryFindFirstArgsBase
      

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Period
   */


  export type AggregatePeriod = {
    _count: PeriodCountAggregateOutputType | null
    _avg: PeriodAvgAggregateOutputType | null
    _sum: PeriodSumAggregateOutputType | null
    _min: PeriodMinAggregateOutputType | null
    _max: PeriodMaxAggregateOutputType | null
  }

  export type PeriodAvgAggregateOutputType = {
    month: number | null
    year: number | null
  }

  export type PeriodSumAggregateOutputType = {
    month: number | null
    year: number | null
  }

  export type PeriodMinAggregateOutputType = {
    id: string | null
    month: number | null
    year: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type PeriodMaxAggregateOutputType = {
    id: string | null
    month: number | null
    year: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type PeriodCountAggregateOutputType = {
    id: number
    month: number
    year: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    _all: number
  }


  export type PeriodAvgAggregateInputType = {
    month?: true
    year?: true
  }

  export type PeriodSumAggregateInputType = {
    month?: true
    year?: true
  }

  export type PeriodMinAggregateInputType = {
    id?: true
    month?: true
    year?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type PeriodMaxAggregateInputType = {
    id?: true
    month?: true
    year?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type PeriodCountAggregateInputType = {
    id?: true
    month?: true
    year?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    _all?: true
  }

  export type PeriodAggregateArgs = {
    /**
     * Filter which Period to aggregate.
     * 
    **/
    where?: PeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     * 
    **/
    orderBy?: Enumerable<PeriodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Periods
    **/
    _count?: true | PeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PeriodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PeriodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PeriodMaxAggregateInputType
  }

  export type GetPeriodAggregateType<T extends PeriodAggregateArgs> = {
        [P in keyof T & keyof AggregatePeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePeriod[P]>
      : GetScalarType<T[P], AggregatePeriod[P]>
  }




  export type PeriodGroupByArgs = {
    where?: PeriodWhereInput
    orderBy?: Enumerable<PeriodOrderByWithAggregationInput>
    by: Array<PeriodScalarFieldEnum>
    having?: PeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PeriodCountAggregateInputType | true
    _avg?: PeriodAvgAggregateInputType
    _sum?: PeriodSumAggregateInputType
    _min?: PeriodMinAggregateInputType
    _max?: PeriodMaxAggregateInputType
  }


  export type PeriodGroupByOutputType = {
    id: string
    month: number
    year: number
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    _count: PeriodCountAggregateOutputType | null
    _avg: PeriodAvgAggregateOutputType | null
    _sum: PeriodSumAggregateOutputType | null
    _min: PeriodMinAggregateOutputType | null
    _max: PeriodMaxAggregateOutputType | null
  }

  type GetPeriodGroupByPayload<T extends PeriodGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PeriodGroupByOutputType[P]>
            : GetScalarType<T[P], PeriodGroupByOutputType[P]>
        }
      >
    >


  export type PeriodSelect = {
    id?: boolean
    month?: boolean
    year?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    expenses?: boolean | ExpenseFindManyArgs
    earnings?: boolean | EarnFindManyArgs
    GoalPeriods?: boolean | GoalPeriodFindManyArgs
    _count?: boolean | PeriodCountOutputTypeArgs
  }


  export type PeriodInclude = {
    expenses?: boolean | ExpenseFindManyArgs
    earnings?: boolean | EarnFindManyArgs
    GoalPeriods?: boolean | GoalPeriodFindManyArgs
    _count?: boolean | PeriodCountOutputTypeArgs
  } 

  export type PeriodGetPayload<S extends boolean | null | undefined | PeriodArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Period :
    S extends undefined ? never :
    S extends { include: any } & (PeriodArgs | PeriodFindManyArgs)
    ? Period  & {
    [P in TrueKeys<S['include']>]:
        P extends 'expenses' ? Array < ExpenseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'earnings' ? Array < EarnGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'GoalPeriods' ? Array < GoalPeriodGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PeriodCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (PeriodArgs | PeriodFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'expenses' ? Array < ExpenseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'earnings' ? Array < EarnGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'GoalPeriods' ? Array < GoalPeriodGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PeriodCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Period ? Period[P] : never
  } 
      : Period


  type PeriodCountArgs = Merge<
    Omit<PeriodFindManyArgs, 'select' | 'include'> & {
      select?: PeriodCountAggregateInputType | true
    }
  >

  export interface PeriodDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Period that matches the filter.
     * @param {PeriodFindUniqueArgs} args - Arguments to find a Period
     * @example
     * // Get one Period
     * const period = await prisma.period.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PeriodFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PeriodFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Period'> extends True ? Prisma__PeriodClient<PeriodGetPayload<T>> : Prisma__PeriodClient<PeriodGetPayload<T> | null, null>

    /**
     * Find the first Period that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodFindFirstArgs} args - Arguments to find a Period
     * @example
     * // Get one Period
     * const period = await prisma.period.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PeriodFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PeriodFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Period'> extends True ? Prisma__PeriodClient<PeriodGetPayload<T>> : Prisma__PeriodClient<PeriodGetPayload<T> | null, null>

    /**
     * Find zero or more Periods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Periods
     * const periods = await prisma.period.findMany()
     * 
     * // Get first 10 Periods
     * const periods = await prisma.period.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const periodWithIdOnly = await prisma.period.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PeriodFindManyArgs>(
      args?: SelectSubset<T, PeriodFindManyArgs>
    ): PrismaPromise<Array<PeriodGetPayload<T>>>

    /**
     * Create a Period.
     * @param {PeriodCreateArgs} args - Arguments to create a Period.
     * @example
     * // Create one Period
     * const Period = await prisma.period.create({
     *   data: {
     *     // ... data to create a Period
     *   }
     * })
     * 
    **/
    create<T extends PeriodCreateArgs>(
      args: SelectSubset<T, PeriodCreateArgs>
    ): Prisma__PeriodClient<PeriodGetPayload<T>>

    /**
     * Create many Periods.
     *     @param {PeriodCreateManyArgs} args - Arguments to create many Periods.
     *     @example
     *     // Create many Periods
     *     const period = await prisma.period.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PeriodCreateManyArgs>(
      args?: SelectSubset<T, PeriodCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Period.
     * @param {PeriodDeleteArgs} args - Arguments to delete one Period.
     * @example
     * // Delete one Period
     * const Period = await prisma.period.delete({
     *   where: {
     *     // ... filter to delete one Period
     *   }
     * })
     * 
    **/
    delete<T extends PeriodDeleteArgs>(
      args: SelectSubset<T, PeriodDeleteArgs>
    ): Prisma__PeriodClient<PeriodGetPayload<T>>

    /**
     * Update one Period.
     * @param {PeriodUpdateArgs} args - Arguments to update one Period.
     * @example
     * // Update one Period
     * const period = await prisma.period.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PeriodUpdateArgs>(
      args: SelectSubset<T, PeriodUpdateArgs>
    ): Prisma__PeriodClient<PeriodGetPayload<T>>

    /**
     * Delete zero or more Periods.
     * @param {PeriodDeleteManyArgs} args - Arguments to filter Periods to delete.
     * @example
     * // Delete a few Periods
     * const { count } = await prisma.period.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PeriodDeleteManyArgs>(
      args?: SelectSubset<T, PeriodDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Periods
     * const period = await prisma.period.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PeriodUpdateManyArgs>(
      args: SelectSubset<T, PeriodUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Period.
     * @param {PeriodUpsertArgs} args - Arguments to update or create a Period.
     * @example
     * // Update or create a Period
     * const period = await prisma.period.upsert({
     *   create: {
     *     // ... data to create a Period
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Period we want to update
     *   }
     * })
    **/
    upsert<T extends PeriodUpsertArgs>(
      args: SelectSubset<T, PeriodUpsertArgs>
    ): Prisma__PeriodClient<PeriodGetPayload<T>>

    /**
     * Find one Period that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PeriodFindUniqueOrThrowArgs} args - Arguments to find a Period
     * @example
     * // Get one Period
     * const period = await prisma.period.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PeriodFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PeriodFindUniqueOrThrowArgs>
    ): Prisma__PeriodClient<PeriodGetPayload<T>>

    /**
     * Find the first Period that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodFindFirstOrThrowArgs} args - Arguments to find a Period
     * @example
     * // Get one Period
     * const period = await prisma.period.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PeriodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PeriodFindFirstOrThrowArgs>
    ): Prisma__PeriodClient<PeriodGetPayload<T>>

    /**
     * Count the number of Periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodCountArgs} args - Arguments to filter Periods to count.
     * @example
     * // Count the number of Periods
     * const count = await prisma.period.count({
     *   where: {
     *     // ... the filter for the Periods we want to count
     *   }
     * })
    **/
    count<T extends PeriodCountArgs>(
      args?: Subset<T, PeriodCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Period.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PeriodAggregateArgs>(args: Subset<T, PeriodAggregateArgs>): PrismaPromise<GetPeriodAggregateType<T>>

    /**
     * Group by Period.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PeriodGroupByArgs['orderBy'] }
        : { orderBy?: PeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPeriodGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Period.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PeriodClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    expenses<T extends ExpenseFindManyArgs= {}>(args?: Subset<T, ExpenseFindManyArgs>): PrismaPromise<Array<ExpenseGetPayload<T>>| Null>;

    earnings<T extends EarnFindManyArgs= {}>(args?: Subset<T, EarnFindManyArgs>): PrismaPromise<Array<EarnGetPayload<T>>| Null>;

    GoalPeriods<T extends GoalPeriodFindManyArgs= {}>(args?: Subset<T, GoalPeriodFindManyArgs>): PrismaPromise<Array<GoalPeriodGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Period base type for findUnique actions
   */
  export type PeriodFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * Filter, which Period to fetch.
     * 
    **/
    where: PeriodWhereUniqueInput
  }

  /**
   * Period: findUnique
   */
  export interface PeriodFindUniqueArgs extends PeriodFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Period base type for findFirst actions
   */
  export type PeriodFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * Filter, which Period to fetch.
     * 
    **/
    where?: PeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     * 
    **/
    orderBy?: Enumerable<PeriodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Periods.
     * 
    **/
    cursor?: PeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Periods.
     * 
    **/
    distinct?: Enumerable<PeriodScalarFieldEnum>
  }

  /**
   * Period: findFirst
   */
  export interface PeriodFindFirstArgs extends PeriodFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Period findMany
   */
  export type PeriodFindManyArgs = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * Filter, which Periods to fetch.
     * 
    **/
    where?: PeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Periods to fetch.
     * 
    **/
    orderBy?: Enumerable<PeriodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Periods.
     * 
    **/
    cursor?: PeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Periods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Periods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PeriodScalarFieldEnum>
  }


  /**
   * Period create
   */
  export type PeriodCreateArgs = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * The data needed to create a Period.
     * 
    **/
    data: XOR<PeriodCreateInput, PeriodUncheckedCreateInput>
  }


  /**
   * Period createMany
   */
  export type PeriodCreateManyArgs = {
    /**
     * The data used to create many Periods.
     * 
    **/
    data: Enumerable<PeriodCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Period update
   */
  export type PeriodUpdateArgs = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * The data needed to update a Period.
     * 
    **/
    data: XOR<PeriodUpdateInput, PeriodUncheckedUpdateInput>
    /**
     * Choose, which Period to update.
     * 
    **/
    where: PeriodWhereUniqueInput
  }


  /**
   * Period updateMany
   */
  export type PeriodUpdateManyArgs = {
    /**
     * The data used to update Periods.
     * 
    **/
    data: XOR<PeriodUpdateManyMutationInput, PeriodUncheckedUpdateManyInput>
    /**
     * Filter which Periods to update
     * 
    **/
    where?: PeriodWhereInput
  }


  /**
   * Period upsert
   */
  export type PeriodUpsertArgs = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * The filter to search for the Period to update in case it exists.
     * 
    **/
    where: PeriodWhereUniqueInput
    /**
     * In case the Period found by the `where` argument doesn't exist, create a new Period with this data.
     * 
    **/
    create: XOR<PeriodCreateInput, PeriodUncheckedCreateInput>
    /**
     * In case the Period was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PeriodUpdateInput, PeriodUncheckedUpdateInput>
  }


  /**
   * Period delete
   */
  export type PeriodDeleteArgs = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
    /**
     * Filter which Period to delete.
     * 
    **/
    where: PeriodWhereUniqueInput
  }


  /**
   * Period deleteMany
   */
  export type PeriodDeleteManyArgs = {
    /**
     * Filter which Periods to delete
     * 
    **/
    where?: PeriodWhereInput
  }


  /**
   * Period: findUniqueOrThrow
   */
  export type PeriodFindUniqueOrThrowArgs = PeriodFindUniqueArgsBase
      

  /**
   * Period: findFirstOrThrow
   */
  export type PeriodFindFirstOrThrowArgs = PeriodFindFirstArgsBase
      

  /**
   * Period without action
   */
  export type PeriodArgs = {
    /**
     * Select specific fields to fetch from the Period
     * 
    **/
    select?: PeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PeriodInclude | null
  }



  /**
   * Model Goal
   */


  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    amount: number | null
  }

  export type GoalSumAggregateOutputType = {
    amount: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    amount: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    amount: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    amount?: true
  }

  export type GoalSumAggregateInputType = {
    amount?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    _all?: true
  }

  export type GoalAggregateArgs = {
    /**
     * Filter which Goal to aggregate.
     * 
    **/
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs = {
    where?: GoalWhereInput
    orderBy?: Enumerable<GoalOrderByWithAggregationInput>
    by: Array<GoalScalarFieldEnum>
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }


  export type GoalGroupByOutputType = {
    id: string
    amount: number
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect = {
    id?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
  }


  export type GoalGetPayload<S extends boolean | null | undefined | GoalArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Goal :
    S extends undefined ? never :
    S extends { include: any } & (GoalArgs | GoalFindManyArgs)
    ? Goal 
    : S extends { select: any } & (GoalArgs | GoalFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Goal ? Goal[P] : never
  } 
      : Goal


  type GoalCountArgs = Merge<
    Omit<GoalFindManyArgs, 'select' | 'include'> & {
      select?: GoalCountAggregateInputType | true
    }
  >

  export interface GoalDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GoalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Goal'> extends True ? Prisma__GoalClient<GoalGetPayload<T>> : Prisma__GoalClient<GoalGetPayload<T> | null, null>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GoalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Goal'> extends True ? Prisma__GoalClient<GoalGetPayload<T>> : Prisma__GoalClient<GoalGetPayload<T> | null, null>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoalFindManyArgs>(
      args?: SelectSubset<T, GoalFindManyArgs>
    ): PrismaPromise<Array<GoalGetPayload<T>>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
    **/
    create<T extends GoalCreateArgs>(
      args: SelectSubset<T, GoalCreateArgs>
    ): Prisma__GoalClient<GoalGetPayload<T>>

    /**
     * Create many Goals.
     *     @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     *     @example
     *     // Create many Goals
     *     const goal = await prisma.goal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoalCreateManyArgs>(
      args?: SelectSubset<T, GoalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
    **/
    delete<T extends GoalDeleteArgs>(
      args: SelectSubset<T, GoalDeleteArgs>
    ): Prisma__GoalClient<GoalGetPayload<T>>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoalUpdateArgs>(
      args: SelectSubset<T, GoalUpdateArgs>
    ): Prisma__GoalClient<GoalGetPayload<T>>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoalDeleteManyArgs>(
      args?: SelectSubset<T, GoalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoalUpdateManyArgs>(
      args: SelectSubset<T, GoalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
    **/
    upsert<T extends GoalUpsertArgs>(
      args: SelectSubset<T, GoalUpsertArgs>
    ): Prisma__GoalClient<GoalGetPayload<T>>

    /**
     * Find one Goal that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GoalFindUniqueOrThrowArgs>
    ): Prisma__GoalClient<GoalGetPayload<T>>

    /**
     * Find the first Goal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GoalFindFirstOrThrowArgs>
    ): Prisma__GoalClient<GoalGetPayload<T>>

    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GoalClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Goal base type for findUnique actions
   */
  export type GoalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Filter, which Goal to fetch.
     * 
    **/
    where: GoalWhereUniqueInput
  }

  /**
   * Goal: findUnique
   */
  export interface GoalFindUniqueArgs extends GoalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Goal base type for findFirst actions
   */
  export type GoalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Filter, which Goal to fetch.
     * 
    **/
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     * 
    **/
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     * 
    **/
    distinct?: Enumerable<GoalScalarFieldEnum>
  }

  /**
   * Goal: findFirst
   */
  export interface GoalFindFirstArgs extends GoalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Filter, which Goals to fetch.
     * 
    **/
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     * 
    **/
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GoalScalarFieldEnum>
  }


  /**
   * Goal create
   */
  export type GoalCreateArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * The data needed to create a Goal.
     * 
    **/
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }


  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs = {
    /**
     * The data used to create many Goals.
     * 
    **/
    data: Enumerable<GoalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Goal update
   */
  export type GoalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * The data needed to update a Goal.
     * 
    **/
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     * 
    **/
    where: GoalWhereUniqueInput
  }


  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs = {
    /**
     * The data used to update Goals.
     * 
    **/
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     * 
    **/
    where?: GoalWhereInput
  }


  /**
   * Goal upsert
   */
  export type GoalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * The filter to search for the Goal to update in case it exists.
     * 
    **/
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     * 
    **/
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }


  /**
   * Goal delete
   */
  export type GoalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
    /**
     * Filter which Goal to delete.
     * 
    **/
    where: GoalWhereUniqueInput
  }


  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs = {
    /**
     * Filter which Goals to delete
     * 
    **/
    where?: GoalWhereInput
  }


  /**
   * Goal: findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs = GoalFindUniqueArgsBase
      

  /**
   * Goal: findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs = GoalFindFirstArgsBase
      

  /**
   * Goal without action
   */
  export type GoalArgs = {
    /**
     * Select specific fields to fetch from the Goal
     * 
    **/
    select?: GoalSelect | null
  }



  /**
   * Model GoalPeriod
   */


  export type AggregateGoalPeriod = {
    _count: GoalPeriodCountAggregateOutputType | null
    _avg: GoalPeriodAvgAggregateOutputType | null
    _sum: GoalPeriodSumAggregateOutputType | null
    _min: GoalPeriodMinAggregateOutputType | null
    _max: GoalPeriodMaxAggregateOutputType | null
  }

  export type GoalPeriodAvgAggregateOutputType = {
    amount: number | null
  }

  export type GoalPeriodSumAggregateOutputType = {
    amount: number | null
  }

  export type GoalPeriodMinAggregateOutputType = {
    id: string | null
    amount: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    period_id: string | null
  }

  export type GoalPeriodMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    period_id: string | null
  }

  export type GoalPeriodCountAggregateOutputType = {
    id: number
    amount: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    period_id: number
    _all: number
  }


  export type GoalPeriodAvgAggregateInputType = {
    amount?: true
  }

  export type GoalPeriodSumAggregateInputType = {
    amount?: true
  }

  export type GoalPeriodMinAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    period_id?: true
  }

  export type GoalPeriodMaxAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    period_id?: true
  }

  export type GoalPeriodCountAggregateInputType = {
    id?: true
    amount?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    period_id?: true
    _all?: true
  }

  export type GoalPeriodAggregateArgs = {
    /**
     * Filter which GoalPeriod to aggregate.
     * 
    **/
    where?: GoalPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalPeriods to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalPeriodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GoalPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalPeriods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalPeriods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GoalPeriods
    **/
    _count?: true | GoalPeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalPeriodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalPeriodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalPeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalPeriodMaxAggregateInputType
  }

  export type GetGoalPeriodAggregateType<T extends GoalPeriodAggregateArgs> = {
        [P in keyof T & keyof AggregateGoalPeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoalPeriod[P]>
      : GetScalarType<T[P], AggregateGoalPeriod[P]>
  }




  export type GoalPeriodGroupByArgs = {
    where?: GoalPeriodWhereInput
    orderBy?: Enumerable<GoalPeriodOrderByWithAggregationInput>
    by: Array<GoalPeriodScalarFieldEnum>
    having?: GoalPeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalPeriodCountAggregateInputType | true
    _avg?: GoalPeriodAvgAggregateInputType
    _sum?: GoalPeriodSumAggregateInputType
    _min?: GoalPeriodMinAggregateInputType
    _max?: GoalPeriodMaxAggregateInputType
  }


  export type GoalPeriodGroupByOutputType = {
    id: string
    amount: number
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    period_id: string
    _count: GoalPeriodCountAggregateOutputType | null
    _avg: GoalPeriodAvgAggregateOutputType | null
    _sum: GoalPeriodSumAggregateOutputType | null
    _min: GoalPeriodMinAggregateOutputType | null
    _max: GoalPeriodMaxAggregateOutputType | null
  }

  type GetGoalPeriodGroupByPayload<T extends GoalPeriodGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GoalPeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalPeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalPeriodGroupByOutputType[P]>
            : GetScalarType<T[P], GoalPeriodGroupByOutputType[P]>
        }
      >
    >


  export type GoalPeriodSelect = {
    id?: boolean
    amount?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    period?: boolean | PeriodArgs
    period_id?: boolean
  }


  export type GoalPeriodInclude = {
    period?: boolean | PeriodArgs
  } 

  export type GoalPeriodGetPayload<S extends boolean | null | undefined | GoalPeriodArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GoalPeriod :
    S extends undefined ? never :
    S extends { include: any } & (GoalPeriodArgs | GoalPeriodFindManyArgs)
    ? GoalPeriod  & {
    [P in TrueKeys<S['include']>]:
        P extends 'period' ? PeriodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (GoalPeriodArgs | GoalPeriodFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'period' ? PeriodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof GoalPeriod ? GoalPeriod[P] : never
  } 
      : GoalPeriod


  type GoalPeriodCountArgs = Merge<
    Omit<GoalPeriodFindManyArgs, 'select' | 'include'> & {
      select?: GoalPeriodCountAggregateInputType | true
    }
  >

  export interface GoalPeriodDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one GoalPeriod that matches the filter.
     * @param {GoalPeriodFindUniqueArgs} args - Arguments to find a GoalPeriod
     * @example
     * // Get one GoalPeriod
     * const goalPeriod = await prisma.goalPeriod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoalPeriodFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GoalPeriodFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GoalPeriod'> extends True ? Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>> : Prisma__GoalPeriodClient<GoalPeriodGetPayload<T> | null, null>

    /**
     * Find the first GoalPeriod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodFindFirstArgs} args - Arguments to find a GoalPeriod
     * @example
     * // Get one GoalPeriod
     * const goalPeriod = await prisma.goalPeriod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoalPeriodFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GoalPeriodFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GoalPeriod'> extends True ? Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>> : Prisma__GoalPeriodClient<GoalPeriodGetPayload<T> | null, null>

    /**
     * Find zero or more GoalPeriods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GoalPeriods
     * const goalPeriods = await prisma.goalPeriod.findMany()
     * 
     * // Get first 10 GoalPeriods
     * const goalPeriods = await prisma.goalPeriod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalPeriodWithIdOnly = await prisma.goalPeriod.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoalPeriodFindManyArgs>(
      args?: SelectSubset<T, GoalPeriodFindManyArgs>
    ): PrismaPromise<Array<GoalPeriodGetPayload<T>>>

    /**
     * Create a GoalPeriod.
     * @param {GoalPeriodCreateArgs} args - Arguments to create a GoalPeriod.
     * @example
     * // Create one GoalPeriod
     * const GoalPeriod = await prisma.goalPeriod.create({
     *   data: {
     *     // ... data to create a GoalPeriod
     *   }
     * })
     * 
    **/
    create<T extends GoalPeriodCreateArgs>(
      args: SelectSubset<T, GoalPeriodCreateArgs>
    ): Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>>

    /**
     * Create many GoalPeriods.
     *     @param {GoalPeriodCreateManyArgs} args - Arguments to create many GoalPeriods.
     *     @example
     *     // Create many GoalPeriods
     *     const goalPeriod = await prisma.goalPeriod.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoalPeriodCreateManyArgs>(
      args?: SelectSubset<T, GoalPeriodCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GoalPeriod.
     * @param {GoalPeriodDeleteArgs} args - Arguments to delete one GoalPeriod.
     * @example
     * // Delete one GoalPeriod
     * const GoalPeriod = await prisma.goalPeriod.delete({
     *   where: {
     *     // ... filter to delete one GoalPeriod
     *   }
     * })
     * 
    **/
    delete<T extends GoalPeriodDeleteArgs>(
      args: SelectSubset<T, GoalPeriodDeleteArgs>
    ): Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>>

    /**
     * Update one GoalPeriod.
     * @param {GoalPeriodUpdateArgs} args - Arguments to update one GoalPeriod.
     * @example
     * // Update one GoalPeriod
     * const goalPeriod = await prisma.goalPeriod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoalPeriodUpdateArgs>(
      args: SelectSubset<T, GoalPeriodUpdateArgs>
    ): Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>>

    /**
     * Delete zero or more GoalPeriods.
     * @param {GoalPeriodDeleteManyArgs} args - Arguments to filter GoalPeriods to delete.
     * @example
     * // Delete a few GoalPeriods
     * const { count } = await prisma.goalPeriod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoalPeriodDeleteManyArgs>(
      args?: SelectSubset<T, GoalPeriodDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GoalPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GoalPeriods
     * const goalPeriod = await prisma.goalPeriod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoalPeriodUpdateManyArgs>(
      args: SelectSubset<T, GoalPeriodUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GoalPeriod.
     * @param {GoalPeriodUpsertArgs} args - Arguments to update or create a GoalPeriod.
     * @example
     * // Update or create a GoalPeriod
     * const goalPeriod = await prisma.goalPeriod.upsert({
     *   create: {
     *     // ... data to create a GoalPeriod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GoalPeriod we want to update
     *   }
     * })
    **/
    upsert<T extends GoalPeriodUpsertArgs>(
      args: SelectSubset<T, GoalPeriodUpsertArgs>
    ): Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>>

    /**
     * Find one GoalPeriod that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GoalPeriodFindUniqueOrThrowArgs} args - Arguments to find a GoalPeriod
     * @example
     * // Get one GoalPeriod
     * const goalPeriod = await prisma.goalPeriod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GoalPeriodFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GoalPeriodFindUniqueOrThrowArgs>
    ): Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>>

    /**
     * Find the first GoalPeriod that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodFindFirstOrThrowArgs} args - Arguments to find a GoalPeriod
     * @example
     * // Get one GoalPeriod
     * const goalPeriod = await prisma.goalPeriod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GoalPeriodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GoalPeriodFindFirstOrThrowArgs>
    ): Prisma__GoalPeriodClient<GoalPeriodGetPayload<T>>

    /**
     * Count the number of GoalPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodCountArgs} args - Arguments to filter GoalPeriods to count.
     * @example
     * // Count the number of GoalPeriods
     * const count = await prisma.goalPeriod.count({
     *   where: {
     *     // ... the filter for the GoalPeriods we want to count
     *   }
     * })
    **/
    count<T extends GoalPeriodCountArgs>(
      args?: Subset<T, GoalPeriodCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalPeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GoalPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalPeriodAggregateArgs>(args: Subset<T, GoalPeriodAggregateArgs>): PrismaPromise<GetGoalPeriodAggregateType<T>>

    /**
     * Group by GoalPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalPeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalPeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalPeriodGroupByArgs['orderBy'] }
        : { orderBy?: GoalPeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalPeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalPeriodGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GoalPeriod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GoalPeriodClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    period<T extends PeriodArgs= {}>(args?: Subset<T, PeriodArgs>): Prisma__PeriodClient<PeriodGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GoalPeriod base type for findUnique actions
   */
  export type GoalPeriodFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * Filter, which GoalPeriod to fetch.
     * 
    **/
    where: GoalPeriodWhereUniqueInput
  }

  /**
   * GoalPeriod: findUnique
   */
  export interface GoalPeriodFindUniqueArgs extends GoalPeriodFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GoalPeriod base type for findFirst actions
   */
  export type GoalPeriodFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * Filter, which GoalPeriod to fetch.
     * 
    **/
    where?: GoalPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalPeriods to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalPeriodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GoalPeriods.
     * 
    **/
    cursor?: GoalPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalPeriods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalPeriods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GoalPeriods.
     * 
    **/
    distinct?: Enumerable<GoalPeriodScalarFieldEnum>
  }

  /**
   * GoalPeriod: findFirst
   */
  export interface GoalPeriodFindFirstArgs extends GoalPeriodFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GoalPeriod findMany
   */
  export type GoalPeriodFindManyArgs = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * Filter, which GoalPeriods to fetch.
     * 
    **/
    where?: GoalPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GoalPeriods to fetch.
     * 
    **/
    orderBy?: Enumerable<GoalPeriodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GoalPeriods.
     * 
    **/
    cursor?: GoalPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GoalPeriods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GoalPeriods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GoalPeriodScalarFieldEnum>
  }


  /**
   * GoalPeriod create
   */
  export type GoalPeriodCreateArgs = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * The data needed to create a GoalPeriod.
     * 
    **/
    data: XOR<GoalPeriodCreateInput, GoalPeriodUncheckedCreateInput>
  }


  /**
   * GoalPeriod createMany
   */
  export type GoalPeriodCreateManyArgs = {
    /**
     * The data used to create many GoalPeriods.
     * 
    **/
    data: Enumerable<GoalPeriodCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GoalPeriod update
   */
  export type GoalPeriodUpdateArgs = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * The data needed to update a GoalPeriod.
     * 
    **/
    data: XOR<GoalPeriodUpdateInput, GoalPeriodUncheckedUpdateInput>
    /**
     * Choose, which GoalPeriod to update.
     * 
    **/
    where: GoalPeriodWhereUniqueInput
  }


  /**
   * GoalPeriod updateMany
   */
  export type GoalPeriodUpdateManyArgs = {
    /**
     * The data used to update GoalPeriods.
     * 
    **/
    data: XOR<GoalPeriodUpdateManyMutationInput, GoalPeriodUncheckedUpdateManyInput>
    /**
     * Filter which GoalPeriods to update
     * 
    **/
    where?: GoalPeriodWhereInput
  }


  /**
   * GoalPeriod upsert
   */
  export type GoalPeriodUpsertArgs = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * The filter to search for the GoalPeriod to update in case it exists.
     * 
    **/
    where: GoalPeriodWhereUniqueInput
    /**
     * In case the GoalPeriod found by the `where` argument doesn't exist, create a new GoalPeriod with this data.
     * 
    **/
    create: XOR<GoalPeriodCreateInput, GoalPeriodUncheckedCreateInput>
    /**
     * In case the GoalPeriod was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GoalPeriodUpdateInput, GoalPeriodUncheckedUpdateInput>
  }


  /**
   * GoalPeriod delete
   */
  export type GoalPeriodDeleteArgs = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
    /**
     * Filter which GoalPeriod to delete.
     * 
    **/
    where: GoalPeriodWhereUniqueInput
  }


  /**
   * GoalPeriod deleteMany
   */
  export type GoalPeriodDeleteManyArgs = {
    /**
     * Filter which GoalPeriods to delete
     * 
    **/
    where?: GoalPeriodWhereInput
  }


  /**
   * GoalPeriod: findUniqueOrThrow
   */
  export type GoalPeriodFindUniqueOrThrowArgs = GoalPeriodFindUniqueArgsBase
      

  /**
   * GoalPeriod: findFirstOrThrow
   */
  export type GoalPeriodFindFirstOrThrowArgs = GoalPeriodFindFirstArgsBase
      

  /**
   * GoalPeriod without action
   */
  export type GoalPeriodArgs = {
    /**
     * Select specific fields to fetch from the GoalPeriod
     * 
    **/
    select?: GoalPeriodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GoalPeriodInclude | null
  }



  /**
   * Model Expense
   */


  export type AggregateExpense = {
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  export type ExpenseAvgAggregateOutputType = {
    value: number | null
  }

  export type ExpenseSumAggregateOutputType = {
    value: number | null
  }

  export type ExpenseMinAggregateOutputType = {
    id: string | null
    date: Date | null
    description: string | null
    value: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    category_id: string | null
    period_id: string | null
  }

  export type ExpenseMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    description: string | null
    value: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    category_id: string | null
    period_id: string | null
  }

  export type ExpenseCountAggregateOutputType = {
    id: number
    date: number
    description: number
    value: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    category_id: number
    period_id: number
    _all: number
  }


  export type ExpenseAvgAggregateInputType = {
    value?: true
  }

  export type ExpenseSumAggregateInputType = {
    value?: true
  }

  export type ExpenseMinAggregateInputType = {
    id?: true
    date?: true
    description?: true
    value?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    category_id?: true
    period_id?: true
  }

  export type ExpenseMaxAggregateInputType = {
    id?: true
    date?: true
    description?: true
    value?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    category_id?: true
    period_id?: true
  }

  export type ExpenseCountAggregateInputType = {
    id?: true
    date?: true
    description?: true
    value?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    category_id?: true
    period_id?: true
    _all?: true
  }

  export type ExpenseAggregateArgs = {
    /**
     * Filter which Expense to aggregate.
     * 
    **/
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     * 
    **/
    orderBy?: Enumerable<ExpenseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expenses
    **/
    _count?: true | ExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseMaxAggregateInputType
  }

  export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense[P]>
      : GetScalarType<T[P], AggregateExpense[P]>
  }




  export type ExpenseGroupByArgs = {
    where?: ExpenseWhereInput
    orderBy?: Enumerable<ExpenseOrderByWithAggregationInput>
    by: Array<ExpenseScalarFieldEnum>
    having?: ExpenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseCountAggregateInputType | true
    _avg?: ExpenseAvgAggregateInputType
    _sum?: ExpenseSumAggregateInputType
    _min?: ExpenseMinAggregateInputType
    _max?: ExpenseMaxAggregateInputType
  }


  export type ExpenseGroupByOutputType = {
    id: string
    date: Date
    description: string | null
    value: number
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    category_id: string
    period_id: string
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  type GetExpenseGroupByPayload<T extends ExpenseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
        }
      >
    >


  export type ExpenseSelect = {
    id?: boolean
    date?: boolean
    description?: boolean
    value?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    category?: boolean | CategoryArgs
    period?: boolean | PeriodArgs
    category_id?: boolean
    period_id?: boolean
  }


  export type ExpenseInclude = {
    category?: boolean | CategoryArgs
    period?: boolean | PeriodArgs
  } 

  export type ExpenseGetPayload<S extends boolean | null | undefined | ExpenseArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Expense :
    S extends undefined ? never :
    S extends { include: any } & (ExpenseArgs | ExpenseFindManyArgs)
    ? Expense  & {
    [P in TrueKeys<S['include']>]:
        P extends 'category' ? CategoryGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'period' ? PeriodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ExpenseArgs | ExpenseFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'category' ? CategoryGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'period' ? PeriodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Expense ? Expense[P] : never
  } 
      : Expense


  type ExpenseCountArgs = Merge<
    Omit<ExpenseFindManyArgs, 'select' | 'include'> & {
      select?: ExpenseCountAggregateInputType | true
    }
  >

  export interface ExpenseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Expense that matches the filter.
     * @param {ExpenseFindUniqueArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExpenseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExpenseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Expense'> extends True ? Prisma__ExpenseClient<ExpenseGetPayload<T>> : Prisma__ExpenseClient<ExpenseGetPayload<T> | null, null>

    /**
     * Find the first Expense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExpenseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExpenseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Expense'> extends True ? Prisma__ExpenseClient<ExpenseGetPayload<T>> : Prisma__ExpenseClient<ExpenseGetPayload<T> | null, null>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expense.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExpenseFindManyArgs>(
      args?: SelectSubset<T, ExpenseFindManyArgs>
    ): PrismaPromise<Array<ExpenseGetPayload<T>>>

    /**
     * Create a Expense.
     * @param {ExpenseCreateArgs} args - Arguments to create a Expense.
     * @example
     * // Create one Expense
     * const Expense = await prisma.expense.create({
     *   data: {
     *     // ... data to create a Expense
     *   }
     * })
     * 
    **/
    create<T extends ExpenseCreateArgs>(
      args: SelectSubset<T, ExpenseCreateArgs>
    ): Prisma__ExpenseClient<ExpenseGetPayload<T>>

    /**
     * Create many Expenses.
     *     @param {ExpenseCreateManyArgs} args - Arguments to create many Expenses.
     *     @example
     *     // Create many Expenses
     *     const expense = await prisma.expense.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExpenseCreateManyArgs>(
      args?: SelectSubset<T, ExpenseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Expense.
     * @param {ExpenseDeleteArgs} args - Arguments to delete one Expense.
     * @example
     * // Delete one Expense
     * const Expense = await prisma.expense.delete({
     *   where: {
     *     // ... filter to delete one Expense
     *   }
     * })
     * 
    **/
    delete<T extends ExpenseDeleteArgs>(
      args: SelectSubset<T, ExpenseDeleteArgs>
    ): Prisma__ExpenseClient<ExpenseGetPayload<T>>

    /**
     * Update one Expense.
     * @param {ExpenseUpdateArgs} args - Arguments to update one Expense.
     * @example
     * // Update one Expense
     * const expense = await prisma.expense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExpenseUpdateArgs>(
      args: SelectSubset<T, ExpenseUpdateArgs>
    ): Prisma__ExpenseClient<ExpenseGetPayload<T>>

    /**
     * Delete zero or more Expenses.
     * @param {ExpenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExpenseDeleteManyArgs>(
      args?: SelectSubset<T, ExpenseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExpenseUpdateManyArgs>(
      args: SelectSubset<T, ExpenseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Expense.
     * @param {ExpenseUpsertArgs} args - Arguments to update or create a Expense.
     * @example
     * // Update or create a Expense
     * const expense = await prisma.expense.upsert({
     *   create: {
     *     // ... data to create a Expense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense we want to update
     *   }
     * })
    **/
    upsert<T extends ExpenseUpsertArgs>(
      args: SelectSubset<T, ExpenseUpsertArgs>
    ): Prisma__ExpenseClient<ExpenseGetPayload<T>>

    /**
     * Find one Expense that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ExpenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExpenseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ExpenseFindUniqueOrThrowArgs>
    ): Prisma__ExpenseClient<ExpenseGetPayload<T>>

    /**
     * Find the first Expense that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseFindFirstOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExpenseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ExpenseFindFirstOrThrowArgs>
    ): Prisma__ExpenseClient<ExpenseGetPayload<T>>

    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expense.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends ExpenseCountArgs>(
      args?: Subset<T, ExpenseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseAggregateArgs>(args: Subset<T, ExpenseAggregateArgs>): PrismaPromise<GetExpenseAggregateType<T>>

    /**
     * Group by Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenseGroupByArgs['orderBy'] }
        : { orderBy?: ExpenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Expense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExpenseClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    period<T extends PeriodArgs= {}>(args?: Subset<T, PeriodArgs>): Prisma__PeriodClient<PeriodGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Expense base type for findUnique actions
   */
  export type ExpenseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * Filter, which Expense to fetch.
     * 
    **/
    where: ExpenseWhereUniqueInput
  }

  /**
   * Expense: findUnique
   */
  export interface ExpenseFindUniqueArgs extends ExpenseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Expense base type for findFirst actions
   */
  export type ExpenseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * Filter, which Expense to fetch.
     * 
    **/
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     * 
    **/
    orderBy?: Enumerable<ExpenseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     * 
    **/
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     * 
    **/
    distinct?: Enumerable<ExpenseScalarFieldEnum>
  }

  /**
   * Expense: findFirst
   */
  export interface ExpenseFindFirstArgs extends ExpenseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Expense findMany
   */
  export type ExpenseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * Filter, which Expenses to fetch.
     * 
    **/
    where?: ExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     * 
    **/
    orderBy?: Enumerable<ExpenseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expenses.
     * 
    **/
    cursor?: ExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExpenseScalarFieldEnum>
  }


  /**
   * Expense create
   */
  export type ExpenseCreateArgs = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * The data needed to create a Expense.
     * 
    **/
    data: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
  }


  /**
   * Expense createMany
   */
  export type ExpenseCreateManyArgs = {
    /**
     * The data used to create many Expenses.
     * 
    **/
    data: Enumerable<ExpenseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Expense update
   */
  export type ExpenseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * The data needed to update a Expense.
     * 
    **/
    data: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
    /**
     * Choose, which Expense to update.
     * 
    **/
    where: ExpenseWhereUniqueInput
  }


  /**
   * Expense updateMany
   */
  export type ExpenseUpdateManyArgs = {
    /**
     * The data used to update Expenses.
     * 
    **/
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     * 
    **/
    where?: ExpenseWhereInput
  }


  /**
   * Expense upsert
   */
  export type ExpenseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * The filter to search for the Expense to update in case it exists.
     * 
    **/
    where: ExpenseWhereUniqueInput
    /**
     * In case the Expense found by the `where` argument doesn't exist, create a new Expense with this data.
     * 
    **/
    create: XOR<ExpenseCreateInput, ExpenseUncheckedCreateInput>
    /**
     * In case the Expense was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ExpenseUpdateInput, ExpenseUncheckedUpdateInput>
  }


  /**
   * Expense delete
   */
  export type ExpenseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
    /**
     * Filter which Expense to delete.
     * 
    **/
    where: ExpenseWhereUniqueInput
  }


  /**
   * Expense deleteMany
   */
  export type ExpenseDeleteManyArgs = {
    /**
     * Filter which Expenses to delete
     * 
    **/
    where?: ExpenseWhereInput
  }


  /**
   * Expense: findUniqueOrThrow
   */
  export type ExpenseFindUniqueOrThrowArgs = ExpenseFindUniqueArgsBase
      

  /**
   * Expense: findFirstOrThrow
   */
  export type ExpenseFindFirstOrThrowArgs = ExpenseFindFirstArgsBase
      

  /**
   * Expense without action
   */
  export type ExpenseArgs = {
    /**
     * Select specific fields to fetch from the Expense
     * 
    **/
    select?: ExpenseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExpenseInclude | null
  }



  /**
   * Model Earn
   */


  export type AggregateEarn = {
    _count: EarnCountAggregateOutputType | null
    _avg: EarnAvgAggregateOutputType | null
    _sum: EarnSumAggregateOutputType | null
    _min: EarnMinAggregateOutputType | null
    _max: EarnMaxAggregateOutputType | null
  }

  export type EarnAvgAggregateOutputType = {
    value: number | null
  }

  export type EarnSumAggregateOutputType = {
    value: number | null
  }

  export type EarnMinAggregateOutputType = {
    id: string | null
    date: Date | null
    description: string | null
    value: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    category_id: string | null
    period_id: string | null
  }

  export type EarnMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    description: string | null
    value: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    category_id: string | null
    period_id: string | null
  }

  export type EarnCountAggregateOutputType = {
    id: number
    date: number
    description: number
    value: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    category_id: number
    period_id: number
    _all: number
  }


  export type EarnAvgAggregateInputType = {
    value?: true
  }

  export type EarnSumAggregateInputType = {
    value?: true
  }

  export type EarnMinAggregateInputType = {
    id?: true
    date?: true
    description?: true
    value?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    category_id?: true
    period_id?: true
  }

  export type EarnMaxAggregateInputType = {
    id?: true
    date?: true
    description?: true
    value?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    category_id?: true
    period_id?: true
  }

  export type EarnCountAggregateInputType = {
    id?: true
    date?: true
    description?: true
    value?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    category_id?: true
    period_id?: true
    _all?: true
  }

  export type EarnAggregateArgs = {
    /**
     * Filter which Earn to aggregate.
     * 
    **/
    where?: EarnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earns to fetch.
     * 
    **/
    orderBy?: Enumerable<EarnOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EarnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earns.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Earns
    **/
    _count?: true | EarnCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EarnAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EarnSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EarnMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EarnMaxAggregateInputType
  }

  export type GetEarnAggregateType<T extends EarnAggregateArgs> = {
        [P in keyof T & keyof AggregateEarn]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEarn[P]>
      : GetScalarType<T[P], AggregateEarn[P]>
  }




  export type EarnGroupByArgs = {
    where?: EarnWhereInput
    orderBy?: Enumerable<EarnOrderByWithAggregationInput>
    by: Array<EarnScalarFieldEnum>
    having?: EarnScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EarnCountAggregateInputType | true
    _avg?: EarnAvgAggregateInputType
    _sum?: EarnSumAggregateInputType
    _min?: EarnMinAggregateInputType
    _max?: EarnMaxAggregateInputType
  }


  export type EarnGroupByOutputType = {
    id: string
    date: Date
    description: string | null
    value: number
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    category_id: string
    period_id: string
    _count: EarnCountAggregateOutputType | null
    _avg: EarnAvgAggregateOutputType | null
    _sum: EarnSumAggregateOutputType | null
    _min: EarnMinAggregateOutputType | null
    _max: EarnMaxAggregateOutputType | null
  }

  type GetEarnGroupByPayload<T extends EarnGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EarnGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EarnGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EarnGroupByOutputType[P]>
            : GetScalarType<T[P], EarnGroupByOutputType[P]>
        }
      >
    >


  export type EarnSelect = {
    id?: boolean
    date?: boolean
    description?: boolean
    value?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    category?: boolean | CategoryArgs
    period?: boolean | PeriodArgs
    category_id?: boolean
    period_id?: boolean
  }


  export type EarnInclude = {
    category?: boolean | CategoryArgs
    period?: boolean | PeriodArgs
  } 

  export type EarnGetPayload<S extends boolean | null | undefined | EarnArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Earn :
    S extends undefined ? never :
    S extends { include: any } & (EarnArgs | EarnFindManyArgs)
    ? Earn  & {
    [P in TrueKeys<S['include']>]:
        P extends 'category' ? CategoryGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'period' ? PeriodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (EarnArgs | EarnFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'category' ? CategoryGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'period' ? PeriodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Earn ? Earn[P] : never
  } 
      : Earn


  type EarnCountArgs = Merge<
    Omit<EarnFindManyArgs, 'select' | 'include'> & {
      select?: EarnCountAggregateInputType | true
    }
  >

  export interface EarnDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Earn that matches the filter.
     * @param {EarnFindUniqueArgs} args - Arguments to find a Earn
     * @example
     * // Get one Earn
     * const earn = await prisma.earn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EarnFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EarnFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Earn'> extends True ? Prisma__EarnClient<EarnGetPayload<T>> : Prisma__EarnClient<EarnGetPayload<T> | null, null>

    /**
     * Find the first Earn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnFindFirstArgs} args - Arguments to find a Earn
     * @example
     * // Get one Earn
     * const earn = await prisma.earn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EarnFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EarnFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Earn'> extends True ? Prisma__EarnClient<EarnGetPayload<T>> : Prisma__EarnClient<EarnGetPayload<T> | null, null>

    /**
     * Find zero or more Earns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Earns
     * const earns = await prisma.earn.findMany()
     * 
     * // Get first 10 Earns
     * const earns = await prisma.earn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const earnWithIdOnly = await prisma.earn.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EarnFindManyArgs>(
      args?: SelectSubset<T, EarnFindManyArgs>
    ): PrismaPromise<Array<EarnGetPayload<T>>>

    /**
     * Create a Earn.
     * @param {EarnCreateArgs} args - Arguments to create a Earn.
     * @example
     * // Create one Earn
     * const Earn = await prisma.earn.create({
     *   data: {
     *     // ... data to create a Earn
     *   }
     * })
     * 
    **/
    create<T extends EarnCreateArgs>(
      args: SelectSubset<T, EarnCreateArgs>
    ): Prisma__EarnClient<EarnGetPayload<T>>

    /**
     * Create many Earns.
     *     @param {EarnCreateManyArgs} args - Arguments to create many Earns.
     *     @example
     *     // Create many Earns
     *     const earn = await prisma.earn.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EarnCreateManyArgs>(
      args?: SelectSubset<T, EarnCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Earn.
     * @param {EarnDeleteArgs} args - Arguments to delete one Earn.
     * @example
     * // Delete one Earn
     * const Earn = await prisma.earn.delete({
     *   where: {
     *     // ... filter to delete one Earn
     *   }
     * })
     * 
    **/
    delete<T extends EarnDeleteArgs>(
      args: SelectSubset<T, EarnDeleteArgs>
    ): Prisma__EarnClient<EarnGetPayload<T>>

    /**
     * Update one Earn.
     * @param {EarnUpdateArgs} args - Arguments to update one Earn.
     * @example
     * // Update one Earn
     * const earn = await prisma.earn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EarnUpdateArgs>(
      args: SelectSubset<T, EarnUpdateArgs>
    ): Prisma__EarnClient<EarnGetPayload<T>>

    /**
     * Delete zero or more Earns.
     * @param {EarnDeleteManyArgs} args - Arguments to filter Earns to delete.
     * @example
     * // Delete a few Earns
     * const { count } = await prisma.earn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EarnDeleteManyArgs>(
      args?: SelectSubset<T, EarnDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Earns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Earns
     * const earn = await prisma.earn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EarnUpdateManyArgs>(
      args: SelectSubset<T, EarnUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Earn.
     * @param {EarnUpsertArgs} args - Arguments to update or create a Earn.
     * @example
     * // Update or create a Earn
     * const earn = await prisma.earn.upsert({
     *   create: {
     *     // ... data to create a Earn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Earn we want to update
     *   }
     * })
    **/
    upsert<T extends EarnUpsertArgs>(
      args: SelectSubset<T, EarnUpsertArgs>
    ): Prisma__EarnClient<EarnGetPayload<T>>

    /**
     * Find one Earn that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {EarnFindUniqueOrThrowArgs} args - Arguments to find a Earn
     * @example
     * // Get one Earn
     * const earn = await prisma.earn.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EarnFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EarnFindUniqueOrThrowArgs>
    ): Prisma__EarnClient<EarnGetPayload<T>>

    /**
     * Find the first Earn that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnFindFirstOrThrowArgs} args - Arguments to find a Earn
     * @example
     * // Get one Earn
     * const earn = await prisma.earn.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EarnFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EarnFindFirstOrThrowArgs>
    ): Prisma__EarnClient<EarnGetPayload<T>>

    /**
     * Count the number of Earns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnCountArgs} args - Arguments to filter Earns to count.
     * @example
     * // Count the number of Earns
     * const count = await prisma.earn.count({
     *   where: {
     *     // ... the filter for the Earns we want to count
     *   }
     * })
    **/
    count<T extends EarnCountArgs>(
      args?: Subset<T, EarnCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EarnCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Earn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EarnAggregateArgs>(args: Subset<T, EarnAggregateArgs>): PrismaPromise<GetEarnAggregateType<T>>

    /**
     * Group by Earn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarnGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EarnGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EarnGroupByArgs['orderBy'] }
        : { orderBy?: EarnGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EarnGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEarnGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Earn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EarnClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    category<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    period<T extends PeriodArgs= {}>(args?: Subset<T, PeriodArgs>): Prisma__PeriodClient<PeriodGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Earn base type for findUnique actions
   */
  export type EarnFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * Filter, which Earn to fetch.
     * 
    **/
    where: EarnWhereUniqueInput
  }

  /**
   * Earn: findUnique
   */
  export interface EarnFindUniqueArgs extends EarnFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Earn base type for findFirst actions
   */
  export type EarnFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * Filter, which Earn to fetch.
     * 
    **/
    where?: EarnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earns to fetch.
     * 
    **/
    orderBy?: Enumerable<EarnOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Earns.
     * 
    **/
    cursor?: EarnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earns.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Earns.
     * 
    **/
    distinct?: Enumerable<EarnScalarFieldEnum>
  }

  /**
   * Earn: findFirst
   */
  export interface EarnFindFirstArgs extends EarnFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Earn findMany
   */
  export type EarnFindManyArgs = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * Filter, which Earns to fetch.
     * 
    **/
    where?: EarnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earns to fetch.
     * 
    **/
    orderBy?: Enumerable<EarnOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Earns.
     * 
    **/
    cursor?: EarnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earns.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EarnScalarFieldEnum>
  }


  /**
   * Earn create
   */
  export type EarnCreateArgs = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * The data needed to create a Earn.
     * 
    **/
    data: XOR<EarnCreateInput, EarnUncheckedCreateInput>
  }


  /**
   * Earn createMany
   */
  export type EarnCreateManyArgs = {
    /**
     * The data used to create many Earns.
     * 
    **/
    data: Enumerable<EarnCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Earn update
   */
  export type EarnUpdateArgs = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * The data needed to update a Earn.
     * 
    **/
    data: XOR<EarnUpdateInput, EarnUncheckedUpdateInput>
    /**
     * Choose, which Earn to update.
     * 
    **/
    where: EarnWhereUniqueInput
  }


  /**
   * Earn updateMany
   */
  export type EarnUpdateManyArgs = {
    /**
     * The data used to update Earns.
     * 
    **/
    data: XOR<EarnUpdateManyMutationInput, EarnUncheckedUpdateManyInput>
    /**
     * Filter which Earns to update
     * 
    **/
    where?: EarnWhereInput
  }


  /**
   * Earn upsert
   */
  export type EarnUpsertArgs = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * The filter to search for the Earn to update in case it exists.
     * 
    **/
    where: EarnWhereUniqueInput
    /**
     * In case the Earn found by the `where` argument doesn't exist, create a new Earn with this data.
     * 
    **/
    create: XOR<EarnCreateInput, EarnUncheckedCreateInput>
    /**
     * In case the Earn was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EarnUpdateInput, EarnUncheckedUpdateInput>
  }


  /**
   * Earn delete
   */
  export type EarnDeleteArgs = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
    /**
     * Filter which Earn to delete.
     * 
    **/
    where: EarnWhereUniqueInput
  }


  /**
   * Earn deleteMany
   */
  export type EarnDeleteManyArgs = {
    /**
     * Filter which Earns to delete
     * 
    **/
    where?: EarnWhereInput
  }


  /**
   * Earn: findUniqueOrThrow
   */
  export type EarnFindUniqueOrThrowArgs = EarnFindUniqueArgsBase
      

  /**
   * Earn: findFirstOrThrow
   */
  export type EarnFindFirstOrThrowArgs = EarnFindFirstArgsBase
      

  /**
   * Earn without action
   */
  export type EarnArgs = {
    /**
     * Select specific fields to fetch from the Earn
     * 
    **/
    select?: EarnSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EarnInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by_id: 'created_by_id',
    updated_by_id: 'updated_by_id'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    expense: 'expense',
    includeGoal: 'includeGoal',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const EarnScalarFieldEnum: {
    id: 'id',
    date: 'date',
    description: 'description',
    value: 'value',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    category_id: 'category_id',
    period_id: 'period_id'
  };

  export type EarnScalarFieldEnum = (typeof EarnScalarFieldEnum)[keyof typeof EarnScalarFieldEnum]


  export const ExpenseScalarFieldEnum: {
    id: 'id',
    date: 'date',
    description: 'description',
    value: 'value',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    category_id: 'category_id',
    period_id: 'period_id'
  };

  export type ExpenseScalarFieldEnum = (typeof ExpenseScalarFieldEnum)[keyof typeof ExpenseScalarFieldEnum]


  export const GoalPeriodScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    period_id: 'period_id'
  };

  export type GoalPeriodScalarFieldEnum = (typeof GoalPeriodScalarFieldEnum)[keyof typeof GoalPeriodScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const PeriodScalarFieldEnum: {
    id: 'id',
    month: 'month',
    year: 'year',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by'
  };

  export type PeriodScalarFieldEnum = (typeof PeriodScalarFieldEnum)[keyof typeof PeriodScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    type?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by_id?: StringNullableFilter | string | null
    updated_by_id?: StringNullableFilter | string | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type AccountWhereUniqueInput = {
    id?: string
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by_id?: StringNullableWithAggregatesFilter | string | null
    updated_by_id?: StringNullableWithAggregatesFilter | string | null
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    expense?: BoolFilter | boolean
    includeGoal?: BoolFilter | boolean
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    expenses?: ExpenseListRelationFilter
    earnings?: EarnListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    expense?: SortOrder
    includeGoal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    expenses?: ExpenseOrderByRelationAggregateInput
    earnings?: EarnOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    expense?: SortOrder
    includeGoal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    expense?: BoolWithAggregatesFilter | boolean
    includeGoal?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type PeriodWhereInput = {
    AND?: Enumerable<PeriodWhereInput>
    OR?: Enumerable<PeriodWhereInput>
    NOT?: Enumerable<PeriodWhereInput>
    id?: StringFilter | string
    month?: IntFilter | number
    year?: IntFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    expenses?: ExpenseListRelationFilter
    earnings?: EarnListRelationFilter
    GoalPeriods?: GoalPeriodListRelationFilter
  }

  export type PeriodOrderByWithRelationInput = {
    id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    expenses?: ExpenseOrderByRelationAggregateInput
    earnings?: EarnOrderByRelationAggregateInput
    GoalPeriods?: GoalPeriodOrderByRelationAggregateInput
  }

  export type PeriodWhereUniqueInput = {
    id?: string
  }

  export type PeriodOrderByWithAggregationInput = {
    id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    _count?: PeriodCountOrderByAggregateInput
    _avg?: PeriodAvgOrderByAggregateInput
    _max?: PeriodMaxOrderByAggregateInput
    _min?: PeriodMinOrderByAggregateInput
    _sum?: PeriodSumOrderByAggregateInput
  }

  export type PeriodScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PeriodScalarWhereWithAggregatesInput>
    OR?: Enumerable<PeriodScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PeriodScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    month?: IntWithAggregatesFilter | number
    year?: IntWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type GoalWhereInput = {
    AND?: Enumerable<GoalWhereInput>
    OR?: Enumerable<GoalWhereInput>
    NOT?: Enumerable<GoalWhereInput>
    id?: StringFilter | string
    amount?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type GoalWhereUniqueInput = {
    id?: string
  }

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GoalScalarWhereWithAggregatesInput>
    OR?: Enumerable<GoalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GoalScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
  }

  export type GoalPeriodWhereInput = {
    AND?: Enumerable<GoalPeriodWhereInput>
    OR?: Enumerable<GoalPeriodWhereInput>
    NOT?: Enumerable<GoalPeriodWhereInput>
    id?: StringFilter | string
    amount?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    period?: XOR<PeriodRelationFilter, PeriodWhereInput>
    period_id?: StringFilter | string
  }

  export type GoalPeriodOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    period?: PeriodOrderByWithRelationInput
    period_id?: SortOrder
  }

  export type GoalPeriodWhereUniqueInput = {
    id?: string
  }

  export type GoalPeriodOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    period_id?: SortOrder
    _count?: GoalPeriodCountOrderByAggregateInput
    _avg?: GoalPeriodAvgOrderByAggregateInput
    _max?: GoalPeriodMaxOrderByAggregateInput
    _min?: GoalPeriodMinOrderByAggregateInput
    _sum?: GoalPeriodSumOrderByAggregateInput
  }

  export type GoalPeriodScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GoalPeriodScalarWhereWithAggregatesInput>
    OR?: Enumerable<GoalPeriodScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GoalPeriodScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
    period_id?: StringWithAggregatesFilter | string
  }

  export type ExpenseWhereInput = {
    AND?: Enumerable<ExpenseWhereInput>
    OR?: Enumerable<ExpenseWhereInput>
    NOT?: Enumerable<ExpenseWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    value?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    period?: XOR<PeriodRelationFilter, PeriodWhereInput>
    category_id?: StringFilter | string
    period_id?: StringFilter | string
  }

  export type ExpenseOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category?: CategoryOrderByWithRelationInput
    period?: PeriodOrderByWithRelationInput
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type ExpenseWhereUniqueInput = {
    id?: string
  }

  export type ExpenseOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
    _count?: ExpenseCountOrderByAggregateInput
    _avg?: ExpenseAvgOrderByAggregateInput
    _max?: ExpenseMaxOrderByAggregateInput
    _min?: ExpenseMinOrderByAggregateInput
    _sum?: ExpenseSumOrderByAggregateInput
  }

  export type ExpenseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExpenseScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExpenseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExpenseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    description?: StringNullableWithAggregatesFilter | string | null
    value?: FloatWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
    category_id?: StringWithAggregatesFilter | string
    period_id?: StringWithAggregatesFilter | string
  }

  export type EarnWhereInput = {
    AND?: Enumerable<EarnWhereInput>
    OR?: Enumerable<EarnWhereInput>
    NOT?: Enumerable<EarnWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    value?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    period?: XOR<PeriodRelationFilter, PeriodWhereInput>
    category_id?: StringFilter | string
    period_id?: StringFilter | string
  }

  export type EarnOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category?: CategoryOrderByWithRelationInput
    period?: PeriodOrderByWithRelationInput
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type EarnWhereUniqueInput = {
    id?: string
  }

  export type EarnOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
    _count?: EarnCountOrderByAggregateInput
    _avg?: EarnAvgOrderByAggregateInput
    _max?: EarnMaxOrderByAggregateInput
    _min?: EarnMinOrderByAggregateInput
    _sum?: EarnSumOrderByAggregateInput
  }

  export type EarnScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EarnScalarWhereWithAggregatesInput>
    OR?: Enumerable<EarnScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EarnScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    description?: StringNullableWithAggregatesFilter | string | null
    value?: FloatWithAggregatesFilter | number
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_by?: StringNullableWithAggregatesFilter | string | null
    updated_by?: StringNullableWithAggregatesFilter | string | null
    category_id?: StringWithAggregatesFilter | string
    period_id?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateInput = {
    id?: string
    name: string
    type: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by_id?: string | null
    updated_by_id?: string | null
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by_id?: string | null
    updated_by_id?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by_id?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by_id?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    name: string
    type: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by_id?: string | null
    updated_by_id?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by_id?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by_id?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseCreateNestedManyWithoutCategoryInput
    earnings?: EarnCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutCategoryInput
    earnings?: EarnUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUpdateManyWithoutCategoryNestedInput
    earnings?: EarnUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUncheckedUpdateManyWithoutCategoryNestedInput
    earnings?: EarnUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PeriodCreateInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseCreateNestedManyWithoutPeriodInput
    earnings?: EarnCreateNestedManyWithoutPeriodInput
    GoalPeriods?: GoalPeriodCreateNestedManyWithoutPeriodInput
  }

  export type PeriodUncheckedCreateInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutPeriodInput
    earnings?: EarnUncheckedCreateNestedManyWithoutPeriodInput
    GoalPeriods?: GoalPeriodUncheckedCreateNestedManyWithoutPeriodInput
  }

  export type PeriodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUpdateManyWithoutPeriodNestedInput
    earnings?: EarnUpdateManyWithoutPeriodNestedInput
    GoalPeriods?: GoalPeriodUpdateManyWithoutPeriodNestedInput
  }

  export type PeriodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUncheckedUpdateManyWithoutPeriodNestedInput
    earnings?: EarnUncheckedUpdateManyWithoutPeriodNestedInput
    GoalPeriods?: GoalPeriodUncheckedUpdateManyWithoutPeriodNestedInput
  }

  export type PeriodCreateManyInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type PeriodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PeriodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalCreateInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalCreateManyInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalPeriodCreateInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period: PeriodCreateNestedOneWithoutGoalPeriodsInput
  }

  export type GoalPeriodUncheckedCreateInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period_id: string
  }

  export type GoalPeriodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period?: PeriodUpdateOneRequiredWithoutGoalPeriodsNestedInput
  }

  export type GoalPeriodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type GoalPeriodCreateManyInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period_id: string
  }

  export type GoalPeriodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalPeriodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseCreateInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category: CategoryCreateNestedOneWithoutExpensesInput
    period: PeriodCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
    period_id: string
  }

  export type ExpenseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneRequiredWithoutExpensesNestedInput
    period?: PeriodUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseCreateManyInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
    period_id: string
  }

  export type ExpenseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExpenseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type EarnCreateInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category: CategoryCreateNestedOneWithoutEarningsInput
    period: PeriodCreateNestedOneWithoutEarningsInput
  }

  export type EarnUncheckedCreateInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
    period_id: string
  }

  export type EarnUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneRequiredWithoutEarningsNestedInput
    period?: PeriodUpdateOneRequiredWithoutEarningsNestedInput
  }

  export type EarnUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type EarnCreateManyInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
    period_id: string
  }

  export type EarnUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EarnUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ExpenseListRelationFilter = {
    every?: ExpenseWhereInput
    some?: ExpenseWhereInput
    none?: ExpenseWhereInput
  }

  export type EarnListRelationFilter = {
    every?: EarnWhereInput
    some?: EarnWhereInput
    none?: EarnWhereInput
  }

  export type ExpenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EarnOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    expense?: SortOrder
    includeGoal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    expense?: SortOrder
    includeGoal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    expense?: SortOrder
    includeGoal?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type GoalPeriodListRelationFilter = {
    every?: GoalPeriodWhereInput
    some?: GoalPeriodWhereInput
    none?: GoalPeriodWhereInput
  }

  export type GoalPeriodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PeriodCountOrderByAggregateInput = {
    id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type PeriodAvgOrderByAggregateInput = {
    month?: SortOrder
    year?: SortOrder
  }

  export type PeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type PeriodMinOrderByAggregateInput = {
    id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type PeriodSumOrderByAggregateInput = {
    month?: SortOrder
    year?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type PeriodRelationFilter = {
    is?: PeriodWhereInput
    isNot?: PeriodWhereInput
  }

  export type GoalPeriodCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    period_id?: SortOrder
  }

  export type GoalPeriodAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type GoalPeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    period_id?: SortOrder
  }

  export type GoalPeriodMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    period_id?: SortOrder
  }

  export type GoalPeriodSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ExpenseCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type ExpenseAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type ExpenseMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type ExpenseMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type ExpenseSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EarnCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type EarnAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type EarnMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type EarnMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    description?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    category_id?: SortOrder
    period_id?: SortOrder
  }

  export type EarnSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ExpenseCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutCategoryInput>, Enumerable<ExpenseUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutCategoryInput>
    createMany?: ExpenseCreateManyCategoryInputEnvelope
    connect?: Enumerable<ExpenseWhereUniqueInput>
  }

  export type EarnCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<EarnCreateWithoutCategoryInput>, Enumerable<EarnUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutCategoryInput>
    createMany?: EarnCreateManyCategoryInputEnvelope
    connect?: Enumerable<EarnWhereUniqueInput>
  }

  export type ExpenseUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutCategoryInput>, Enumerable<ExpenseUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutCategoryInput>
    createMany?: ExpenseCreateManyCategoryInputEnvelope
    connect?: Enumerable<ExpenseWhereUniqueInput>
  }

  export type EarnUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<EarnCreateWithoutCategoryInput>, Enumerable<EarnUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutCategoryInput>
    createMany?: EarnCreateManyCategoryInputEnvelope
    connect?: Enumerable<EarnWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ExpenseUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutCategoryInput>, Enumerable<ExpenseUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ExpenseUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ExpenseCreateManyCategoryInputEnvelope
    set?: Enumerable<ExpenseWhereUniqueInput>
    disconnect?: Enumerable<ExpenseWhereUniqueInput>
    delete?: Enumerable<ExpenseWhereUniqueInput>
    connect?: Enumerable<ExpenseWhereUniqueInput>
    update?: Enumerable<ExpenseUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ExpenseUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ExpenseScalarWhereInput>
  }

  export type EarnUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<EarnCreateWithoutCategoryInput>, Enumerable<EarnUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<EarnUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: EarnCreateManyCategoryInputEnvelope
    set?: Enumerable<EarnWhereUniqueInput>
    disconnect?: Enumerable<EarnWhereUniqueInput>
    delete?: Enumerable<EarnWhereUniqueInput>
    connect?: Enumerable<EarnWhereUniqueInput>
    update?: Enumerable<EarnUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<EarnUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<EarnScalarWhereInput>
  }

  export type ExpenseUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutCategoryInput>, Enumerable<ExpenseUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ExpenseUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ExpenseCreateManyCategoryInputEnvelope
    set?: Enumerable<ExpenseWhereUniqueInput>
    disconnect?: Enumerable<ExpenseWhereUniqueInput>
    delete?: Enumerable<ExpenseWhereUniqueInput>
    connect?: Enumerable<ExpenseWhereUniqueInput>
    update?: Enumerable<ExpenseUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ExpenseUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ExpenseScalarWhereInput>
  }

  export type EarnUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<EarnCreateWithoutCategoryInput>, Enumerable<EarnUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<EarnUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: EarnCreateManyCategoryInputEnvelope
    set?: Enumerable<EarnWhereUniqueInput>
    disconnect?: Enumerable<EarnWhereUniqueInput>
    delete?: Enumerable<EarnWhereUniqueInput>
    connect?: Enumerable<EarnWhereUniqueInput>
    update?: Enumerable<EarnUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<EarnUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<EarnScalarWhereInput>
  }

  export type ExpenseCreateNestedManyWithoutPeriodInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutPeriodInput>, Enumerable<ExpenseUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutPeriodInput>
    createMany?: ExpenseCreateManyPeriodInputEnvelope
    connect?: Enumerable<ExpenseWhereUniqueInput>
  }

  export type EarnCreateNestedManyWithoutPeriodInput = {
    create?: XOR<Enumerable<EarnCreateWithoutPeriodInput>, Enumerable<EarnUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutPeriodInput>
    createMany?: EarnCreateManyPeriodInputEnvelope
    connect?: Enumerable<EarnWhereUniqueInput>
  }

  export type GoalPeriodCreateNestedManyWithoutPeriodInput = {
    create?: XOR<Enumerable<GoalPeriodCreateWithoutPeriodInput>, Enumerable<GoalPeriodUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<GoalPeriodCreateOrConnectWithoutPeriodInput>
    createMany?: GoalPeriodCreateManyPeriodInputEnvelope
    connect?: Enumerable<GoalPeriodWhereUniqueInput>
  }

  export type ExpenseUncheckedCreateNestedManyWithoutPeriodInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutPeriodInput>, Enumerable<ExpenseUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutPeriodInput>
    createMany?: ExpenseCreateManyPeriodInputEnvelope
    connect?: Enumerable<ExpenseWhereUniqueInput>
  }

  export type EarnUncheckedCreateNestedManyWithoutPeriodInput = {
    create?: XOR<Enumerable<EarnCreateWithoutPeriodInput>, Enumerable<EarnUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutPeriodInput>
    createMany?: EarnCreateManyPeriodInputEnvelope
    connect?: Enumerable<EarnWhereUniqueInput>
  }

  export type GoalPeriodUncheckedCreateNestedManyWithoutPeriodInput = {
    create?: XOR<Enumerable<GoalPeriodCreateWithoutPeriodInput>, Enumerable<GoalPeriodUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<GoalPeriodCreateOrConnectWithoutPeriodInput>
    createMany?: GoalPeriodCreateManyPeriodInputEnvelope
    connect?: Enumerable<GoalPeriodWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExpenseUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutPeriodInput>, Enumerable<ExpenseUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutPeriodInput>
    upsert?: Enumerable<ExpenseUpsertWithWhereUniqueWithoutPeriodInput>
    createMany?: ExpenseCreateManyPeriodInputEnvelope
    set?: Enumerable<ExpenseWhereUniqueInput>
    disconnect?: Enumerable<ExpenseWhereUniqueInput>
    delete?: Enumerable<ExpenseWhereUniqueInput>
    connect?: Enumerable<ExpenseWhereUniqueInput>
    update?: Enumerable<ExpenseUpdateWithWhereUniqueWithoutPeriodInput>
    updateMany?: Enumerable<ExpenseUpdateManyWithWhereWithoutPeriodInput>
    deleteMany?: Enumerable<ExpenseScalarWhereInput>
  }

  export type EarnUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<Enumerable<EarnCreateWithoutPeriodInput>, Enumerable<EarnUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutPeriodInput>
    upsert?: Enumerable<EarnUpsertWithWhereUniqueWithoutPeriodInput>
    createMany?: EarnCreateManyPeriodInputEnvelope
    set?: Enumerable<EarnWhereUniqueInput>
    disconnect?: Enumerable<EarnWhereUniqueInput>
    delete?: Enumerable<EarnWhereUniqueInput>
    connect?: Enumerable<EarnWhereUniqueInput>
    update?: Enumerable<EarnUpdateWithWhereUniqueWithoutPeriodInput>
    updateMany?: Enumerable<EarnUpdateManyWithWhereWithoutPeriodInput>
    deleteMany?: Enumerable<EarnScalarWhereInput>
  }

  export type GoalPeriodUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<Enumerable<GoalPeriodCreateWithoutPeriodInput>, Enumerable<GoalPeriodUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<GoalPeriodCreateOrConnectWithoutPeriodInput>
    upsert?: Enumerable<GoalPeriodUpsertWithWhereUniqueWithoutPeriodInput>
    createMany?: GoalPeriodCreateManyPeriodInputEnvelope
    set?: Enumerable<GoalPeriodWhereUniqueInput>
    disconnect?: Enumerable<GoalPeriodWhereUniqueInput>
    delete?: Enumerable<GoalPeriodWhereUniqueInput>
    connect?: Enumerable<GoalPeriodWhereUniqueInput>
    update?: Enumerable<GoalPeriodUpdateWithWhereUniqueWithoutPeriodInput>
    updateMany?: Enumerable<GoalPeriodUpdateManyWithWhereWithoutPeriodInput>
    deleteMany?: Enumerable<GoalPeriodScalarWhereInput>
  }

  export type ExpenseUncheckedUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<Enumerable<ExpenseCreateWithoutPeriodInput>, Enumerable<ExpenseUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<ExpenseCreateOrConnectWithoutPeriodInput>
    upsert?: Enumerable<ExpenseUpsertWithWhereUniqueWithoutPeriodInput>
    createMany?: ExpenseCreateManyPeriodInputEnvelope
    set?: Enumerable<ExpenseWhereUniqueInput>
    disconnect?: Enumerable<ExpenseWhereUniqueInput>
    delete?: Enumerable<ExpenseWhereUniqueInput>
    connect?: Enumerable<ExpenseWhereUniqueInput>
    update?: Enumerable<ExpenseUpdateWithWhereUniqueWithoutPeriodInput>
    updateMany?: Enumerable<ExpenseUpdateManyWithWhereWithoutPeriodInput>
    deleteMany?: Enumerable<ExpenseScalarWhereInput>
  }

  export type EarnUncheckedUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<Enumerable<EarnCreateWithoutPeriodInput>, Enumerable<EarnUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<EarnCreateOrConnectWithoutPeriodInput>
    upsert?: Enumerable<EarnUpsertWithWhereUniqueWithoutPeriodInput>
    createMany?: EarnCreateManyPeriodInputEnvelope
    set?: Enumerable<EarnWhereUniqueInput>
    disconnect?: Enumerable<EarnWhereUniqueInput>
    delete?: Enumerable<EarnWhereUniqueInput>
    connect?: Enumerable<EarnWhereUniqueInput>
    update?: Enumerable<EarnUpdateWithWhereUniqueWithoutPeriodInput>
    updateMany?: Enumerable<EarnUpdateManyWithWhereWithoutPeriodInput>
    deleteMany?: Enumerable<EarnScalarWhereInput>
  }

  export type GoalPeriodUncheckedUpdateManyWithoutPeriodNestedInput = {
    create?: XOR<Enumerable<GoalPeriodCreateWithoutPeriodInput>, Enumerable<GoalPeriodUncheckedCreateWithoutPeriodInput>>
    connectOrCreate?: Enumerable<GoalPeriodCreateOrConnectWithoutPeriodInput>
    upsert?: Enumerable<GoalPeriodUpsertWithWhereUniqueWithoutPeriodInput>
    createMany?: GoalPeriodCreateManyPeriodInputEnvelope
    set?: Enumerable<GoalPeriodWhereUniqueInput>
    disconnect?: Enumerable<GoalPeriodWhereUniqueInput>
    delete?: Enumerable<GoalPeriodWhereUniqueInput>
    connect?: Enumerable<GoalPeriodWhereUniqueInput>
    update?: Enumerable<GoalPeriodUpdateWithWhereUniqueWithoutPeriodInput>
    updateMany?: Enumerable<GoalPeriodUpdateManyWithWhereWithoutPeriodInput>
    deleteMany?: Enumerable<GoalPeriodScalarWhereInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PeriodCreateNestedOneWithoutGoalPeriodsInput = {
    create?: XOR<PeriodCreateWithoutGoalPeriodsInput, PeriodUncheckedCreateWithoutGoalPeriodsInput>
    connectOrCreate?: PeriodCreateOrConnectWithoutGoalPeriodsInput
    connect?: PeriodWhereUniqueInput
  }

  export type PeriodUpdateOneRequiredWithoutGoalPeriodsNestedInput = {
    create?: XOR<PeriodCreateWithoutGoalPeriodsInput, PeriodUncheckedCreateWithoutGoalPeriodsInput>
    connectOrCreate?: PeriodCreateOrConnectWithoutGoalPeriodsInput
    upsert?: PeriodUpsertWithoutGoalPeriodsInput
    connect?: PeriodWhereUniqueInput
    update?: XOR<PeriodUpdateWithoutGoalPeriodsInput, PeriodUncheckedUpdateWithoutGoalPeriodsInput>
  }

  export type CategoryCreateNestedOneWithoutExpensesInput = {
    create?: XOR<CategoryCreateWithoutExpensesInput, CategoryUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutExpensesInput
    connect?: CategoryWhereUniqueInput
  }

  export type PeriodCreateNestedOneWithoutExpensesInput = {
    create?: XOR<PeriodCreateWithoutExpensesInput, PeriodUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: PeriodCreateOrConnectWithoutExpensesInput
    connect?: PeriodWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CategoryUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<CategoryCreateWithoutExpensesInput, CategoryUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutExpensesInput
    upsert?: CategoryUpsertWithoutExpensesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutExpensesInput, CategoryUncheckedUpdateWithoutExpensesInput>
  }

  export type PeriodUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<PeriodCreateWithoutExpensesInput, PeriodUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: PeriodCreateOrConnectWithoutExpensesInput
    upsert?: PeriodUpsertWithoutExpensesInput
    connect?: PeriodWhereUniqueInput
    update?: XOR<PeriodUpdateWithoutExpensesInput, PeriodUncheckedUpdateWithoutExpensesInput>
  }

  export type CategoryCreateNestedOneWithoutEarningsInput = {
    create?: XOR<CategoryCreateWithoutEarningsInput, CategoryUncheckedCreateWithoutEarningsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutEarningsInput
    connect?: CategoryWhereUniqueInput
  }

  export type PeriodCreateNestedOneWithoutEarningsInput = {
    create?: XOR<PeriodCreateWithoutEarningsInput, PeriodUncheckedCreateWithoutEarningsInput>
    connectOrCreate?: PeriodCreateOrConnectWithoutEarningsInput
    connect?: PeriodWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutEarningsNestedInput = {
    create?: XOR<CategoryCreateWithoutEarningsInput, CategoryUncheckedCreateWithoutEarningsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutEarningsInput
    upsert?: CategoryUpsertWithoutEarningsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutEarningsInput, CategoryUncheckedUpdateWithoutEarningsInput>
  }

  export type PeriodUpdateOneRequiredWithoutEarningsNestedInput = {
    create?: XOR<PeriodCreateWithoutEarningsInput, PeriodUncheckedCreateWithoutEarningsInput>
    connectOrCreate?: PeriodCreateOrConnectWithoutEarningsInput
    upsert?: PeriodUpsertWithoutEarningsInput
    connect?: PeriodWhereUniqueInput
    update?: XOR<PeriodUpdateWithoutEarningsInput, PeriodUncheckedUpdateWithoutEarningsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ExpenseCreateWithoutCategoryInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period: PeriodCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutCategoryInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period_id: string
  }

  export type ExpenseCreateOrConnectWithoutCategoryInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutCategoryInput, ExpenseUncheckedCreateWithoutCategoryInput>
  }

  export type ExpenseCreateManyCategoryInputEnvelope = {
    data: Enumerable<ExpenseCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type EarnCreateWithoutCategoryInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period: PeriodCreateNestedOneWithoutEarningsInput
  }

  export type EarnUncheckedCreateWithoutCategoryInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period_id: string
  }

  export type EarnCreateOrConnectWithoutCategoryInput = {
    where: EarnWhereUniqueInput
    create: XOR<EarnCreateWithoutCategoryInput, EarnUncheckedCreateWithoutCategoryInput>
  }

  export type EarnCreateManyCategoryInputEnvelope = {
    data: Enumerable<EarnCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type ExpenseUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutCategoryInput, ExpenseUncheckedUpdateWithoutCategoryInput>
    create: XOR<ExpenseCreateWithoutCategoryInput, ExpenseUncheckedCreateWithoutCategoryInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutCategoryInput, ExpenseUncheckedUpdateWithoutCategoryInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutCategoryInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutExpensesInput>
  }

  export type ExpenseScalarWhereInput = {
    AND?: Enumerable<ExpenseScalarWhereInput>
    OR?: Enumerable<ExpenseScalarWhereInput>
    NOT?: Enumerable<ExpenseScalarWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    value?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    category_id?: StringFilter | string
    period_id?: StringFilter | string
  }

  export type EarnUpsertWithWhereUniqueWithoutCategoryInput = {
    where: EarnWhereUniqueInput
    update: XOR<EarnUpdateWithoutCategoryInput, EarnUncheckedUpdateWithoutCategoryInput>
    create: XOR<EarnCreateWithoutCategoryInput, EarnUncheckedCreateWithoutCategoryInput>
  }

  export type EarnUpdateWithWhereUniqueWithoutCategoryInput = {
    where: EarnWhereUniqueInput
    data: XOR<EarnUpdateWithoutCategoryInput, EarnUncheckedUpdateWithoutCategoryInput>
  }

  export type EarnUpdateManyWithWhereWithoutCategoryInput = {
    where: EarnScalarWhereInput
    data: XOR<EarnUpdateManyMutationInput, EarnUncheckedUpdateManyWithoutEarningsInput>
  }

  export type EarnScalarWhereInput = {
    AND?: Enumerable<EarnScalarWhereInput>
    OR?: Enumerable<EarnScalarWhereInput>
    NOT?: Enumerable<EarnScalarWhereInput>
    id?: StringFilter | string
    date?: DateTimeFilter | Date | string
    description?: StringNullableFilter | string | null
    value?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    category_id?: StringFilter | string
    period_id?: StringFilter | string
  }

  export type ExpenseCreateWithoutPeriodInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category: CategoryCreateNestedOneWithoutExpensesInput
  }

  export type ExpenseUncheckedCreateWithoutPeriodInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
  }

  export type ExpenseCreateOrConnectWithoutPeriodInput = {
    where: ExpenseWhereUniqueInput
    create: XOR<ExpenseCreateWithoutPeriodInput, ExpenseUncheckedCreateWithoutPeriodInput>
  }

  export type ExpenseCreateManyPeriodInputEnvelope = {
    data: Enumerable<ExpenseCreateManyPeriodInput>
    skipDuplicates?: boolean
  }

  export type EarnCreateWithoutPeriodInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category: CategoryCreateNestedOneWithoutEarningsInput
  }

  export type EarnUncheckedCreateWithoutPeriodInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
  }

  export type EarnCreateOrConnectWithoutPeriodInput = {
    where: EarnWhereUniqueInput
    create: XOR<EarnCreateWithoutPeriodInput, EarnUncheckedCreateWithoutPeriodInput>
  }

  export type EarnCreateManyPeriodInputEnvelope = {
    data: Enumerable<EarnCreateManyPeriodInput>
    skipDuplicates?: boolean
  }

  export type GoalPeriodCreateWithoutPeriodInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type GoalPeriodUncheckedCreateWithoutPeriodInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type GoalPeriodCreateOrConnectWithoutPeriodInput = {
    where: GoalPeriodWhereUniqueInput
    create: XOR<GoalPeriodCreateWithoutPeriodInput, GoalPeriodUncheckedCreateWithoutPeriodInput>
  }

  export type GoalPeriodCreateManyPeriodInputEnvelope = {
    data: Enumerable<GoalPeriodCreateManyPeriodInput>
    skipDuplicates?: boolean
  }

  export type ExpenseUpsertWithWhereUniqueWithoutPeriodInput = {
    where: ExpenseWhereUniqueInput
    update: XOR<ExpenseUpdateWithoutPeriodInput, ExpenseUncheckedUpdateWithoutPeriodInput>
    create: XOR<ExpenseCreateWithoutPeriodInput, ExpenseUncheckedCreateWithoutPeriodInput>
  }

  export type ExpenseUpdateWithWhereUniqueWithoutPeriodInput = {
    where: ExpenseWhereUniqueInput
    data: XOR<ExpenseUpdateWithoutPeriodInput, ExpenseUncheckedUpdateWithoutPeriodInput>
  }

  export type ExpenseUpdateManyWithWhereWithoutPeriodInput = {
    where: ExpenseScalarWhereInput
    data: XOR<ExpenseUpdateManyMutationInput, ExpenseUncheckedUpdateManyWithoutExpensesInput>
  }

  export type EarnUpsertWithWhereUniqueWithoutPeriodInput = {
    where: EarnWhereUniqueInput
    update: XOR<EarnUpdateWithoutPeriodInput, EarnUncheckedUpdateWithoutPeriodInput>
    create: XOR<EarnCreateWithoutPeriodInput, EarnUncheckedCreateWithoutPeriodInput>
  }

  export type EarnUpdateWithWhereUniqueWithoutPeriodInput = {
    where: EarnWhereUniqueInput
    data: XOR<EarnUpdateWithoutPeriodInput, EarnUncheckedUpdateWithoutPeriodInput>
  }

  export type EarnUpdateManyWithWhereWithoutPeriodInput = {
    where: EarnScalarWhereInput
    data: XOR<EarnUpdateManyMutationInput, EarnUncheckedUpdateManyWithoutEarningsInput>
  }

  export type GoalPeriodUpsertWithWhereUniqueWithoutPeriodInput = {
    where: GoalPeriodWhereUniqueInput
    update: XOR<GoalPeriodUpdateWithoutPeriodInput, GoalPeriodUncheckedUpdateWithoutPeriodInput>
    create: XOR<GoalPeriodCreateWithoutPeriodInput, GoalPeriodUncheckedCreateWithoutPeriodInput>
  }

  export type GoalPeriodUpdateWithWhereUniqueWithoutPeriodInput = {
    where: GoalPeriodWhereUniqueInput
    data: XOR<GoalPeriodUpdateWithoutPeriodInput, GoalPeriodUncheckedUpdateWithoutPeriodInput>
  }

  export type GoalPeriodUpdateManyWithWhereWithoutPeriodInput = {
    where: GoalPeriodScalarWhereInput
    data: XOR<GoalPeriodUpdateManyMutationInput, GoalPeriodUncheckedUpdateManyWithoutGoalPeriodsInput>
  }

  export type GoalPeriodScalarWhereInput = {
    AND?: Enumerable<GoalPeriodScalarWhereInput>
    OR?: Enumerable<GoalPeriodScalarWhereInput>
    NOT?: Enumerable<GoalPeriodScalarWhereInput>
    id?: StringFilter | string
    amount?: FloatFilter | number
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    created_by?: StringNullableFilter | string | null
    updated_by?: StringNullableFilter | string | null
    period_id?: StringFilter | string
  }

  export type PeriodCreateWithoutGoalPeriodsInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseCreateNestedManyWithoutPeriodInput
    earnings?: EarnCreateNestedManyWithoutPeriodInput
  }

  export type PeriodUncheckedCreateWithoutGoalPeriodsInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutPeriodInput
    earnings?: EarnUncheckedCreateNestedManyWithoutPeriodInput
  }

  export type PeriodCreateOrConnectWithoutGoalPeriodsInput = {
    where: PeriodWhereUniqueInput
    create: XOR<PeriodCreateWithoutGoalPeriodsInput, PeriodUncheckedCreateWithoutGoalPeriodsInput>
  }

  export type PeriodUpsertWithoutGoalPeriodsInput = {
    update: XOR<PeriodUpdateWithoutGoalPeriodsInput, PeriodUncheckedUpdateWithoutGoalPeriodsInput>
    create: XOR<PeriodCreateWithoutGoalPeriodsInput, PeriodUncheckedCreateWithoutGoalPeriodsInput>
  }

  export type PeriodUpdateWithoutGoalPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUpdateManyWithoutPeriodNestedInput
    earnings?: EarnUpdateManyWithoutPeriodNestedInput
  }

  export type PeriodUncheckedUpdateWithoutGoalPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUncheckedUpdateManyWithoutPeriodNestedInput
    earnings?: EarnUncheckedUpdateManyWithoutPeriodNestedInput
  }

  export type CategoryCreateWithoutExpensesInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    earnings?: EarnCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutExpensesInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    earnings?: EarnUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutExpensesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutExpensesInput, CategoryUncheckedCreateWithoutExpensesInput>
  }

  export type PeriodCreateWithoutExpensesInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    earnings?: EarnCreateNestedManyWithoutPeriodInput
    GoalPeriods?: GoalPeriodCreateNestedManyWithoutPeriodInput
  }

  export type PeriodUncheckedCreateWithoutExpensesInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    earnings?: EarnUncheckedCreateNestedManyWithoutPeriodInput
    GoalPeriods?: GoalPeriodUncheckedCreateNestedManyWithoutPeriodInput
  }

  export type PeriodCreateOrConnectWithoutExpensesInput = {
    where: PeriodWhereUniqueInput
    create: XOR<PeriodCreateWithoutExpensesInput, PeriodUncheckedCreateWithoutExpensesInput>
  }

  export type CategoryUpsertWithoutExpensesInput = {
    update: XOR<CategoryUpdateWithoutExpensesInput, CategoryUncheckedUpdateWithoutExpensesInput>
    create: XOR<CategoryCreateWithoutExpensesInput, CategoryUncheckedCreateWithoutExpensesInput>
  }

  export type CategoryUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    earnings?: EarnUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    earnings?: EarnUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PeriodUpsertWithoutExpensesInput = {
    update: XOR<PeriodUpdateWithoutExpensesInput, PeriodUncheckedUpdateWithoutExpensesInput>
    create: XOR<PeriodCreateWithoutExpensesInput, PeriodUncheckedCreateWithoutExpensesInput>
  }

  export type PeriodUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    earnings?: EarnUpdateManyWithoutPeriodNestedInput
    GoalPeriods?: GoalPeriodUpdateManyWithoutPeriodNestedInput
  }

  export type PeriodUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    earnings?: EarnUncheckedUpdateManyWithoutPeriodNestedInput
    GoalPeriods?: GoalPeriodUncheckedUpdateManyWithoutPeriodNestedInput
  }

  export type CategoryCreateWithoutEarningsInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutEarningsInput = {
    id?: string
    name: string
    expense?: boolean
    includeGoal?: boolean
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutEarningsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutEarningsInput, CategoryUncheckedCreateWithoutEarningsInput>
  }

  export type PeriodCreateWithoutEarningsInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseCreateNestedManyWithoutPeriodInput
    GoalPeriods?: GoalPeriodCreateNestedManyWithoutPeriodInput
  }

  export type PeriodUncheckedCreateWithoutEarningsInput = {
    id?: string
    month: number
    year: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    expenses?: ExpenseUncheckedCreateNestedManyWithoutPeriodInput
    GoalPeriods?: GoalPeriodUncheckedCreateNestedManyWithoutPeriodInput
  }

  export type PeriodCreateOrConnectWithoutEarningsInput = {
    where: PeriodWhereUniqueInput
    create: XOR<PeriodCreateWithoutEarningsInput, PeriodUncheckedCreateWithoutEarningsInput>
  }

  export type CategoryUpsertWithoutEarningsInput = {
    update: XOR<CategoryUpdateWithoutEarningsInput, CategoryUncheckedUpdateWithoutEarningsInput>
    create: XOR<CategoryCreateWithoutEarningsInput, CategoryUncheckedCreateWithoutEarningsInput>
  }

  export type CategoryUpdateWithoutEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    expense?: BoolFieldUpdateOperationsInput | boolean
    includeGoal?: BoolFieldUpdateOperationsInput | boolean
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PeriodUpsertWithoutEarningsInput = {
    update: XOR<PeriodUpdateWithoutEarningsInput, PeriodUncheckedUpdateWithoutEarningsInput>
    create: XOR<PeriodCreateWithoutEarningsInput, PeriodUncheckedCreateWithoutEarningsInput>
  }

  export type PeriodUpdateWithoutEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUpdateManyWithoutPeriodNestedInput
    GoalPeriods?: GoalPeriodUpdateManyWithoutPeriodNestedInput
  }

  export type PeriodUncheckedUpdateWithoutEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    expenses?: ExpenseUncheckedUpdateManyWithoutPeriodNestedInput
    GoalPeriods?: GoalPeriodUncheckedUpdateManyWithoutPeriodNestedInput
  }

  export type ExpenseCreateManyCategoryInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period_id: string
  }

  export type EarnCreateManyCategoryInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    period_id: string
  }

  export type ExpenseUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period?: PeriodUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseUncheckedUpdateManyWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type EarnUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period?: PeriodUpdateOneRequiredWithoutEarningsNestedInput
  }

  export type EarnUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type EarnUncheckedUpdateManyWithoutEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    period_id?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenseCreateManyPeriodInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
  }

  export type EarnCreateManyPeriodInput = {
    id?: string
    date: Date | string
    description?: string | null
    value: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
    category_id: string
  }

  export type GoalPeriodCreateManyPeriodInput = {
    id?: string
    amount: number
    created_at?: Date | string | null
    updated_at?: Date | string | null
    created_by?: string | null
    updated_by?: string | null
  }

  export type ExpenseUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpenseUncheckedUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type EarnUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneRequiredWithoutEarningsNestedInput
  }

  export type EarnUncheckedUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    value?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: StringFieldUpdateOperationsInput | string
  }

  export type GoalPeriodUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalPeriodUncheckedUpdateWithoutPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GoalPeriodUncheckedUpdateManyWithoutGoalPeriodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}